
			  1. Define structures to hold bids
			    a. Struct Node
			    b. Default constructor
			     Node ()
			    c. initialize with a bid (constructor)
			      Node (Bid a bid)
			  2. Initialize the structures used to hold bids
			      nodes.resize(table size)
			  3. Implement logic to free storage when class is destroyed
			      nodes.erase(nodes.begin()
			  4. Implement logic to calculate the binary search tree value
			      return key % table size
			  5. Implement logic to insert a bid
			    a. Insert (Bid bid)
			    b. if (old Node == null pointer)
			      then
			      nodes.insert(nodes.begin() + key, (*new Node))
			      end if
			      else
			      Node found
			      End else
			    c. if (Node->key == UINT_MAX)
			      Then
			      Node->key  key
			      Node->bid  bid
			      end if
			      else
			      Find the next open node (last one)
			    d. while (Node->next! = null pointer)
			      Node   Node->next;
			      end while
			      Node->next new Node (bid, key);
			  6. Implement logic to print all bids
			  7. Implement logic to remove a bid
			      Print All ()
			    a. remove (string bid Id)
			      nodes.erase(nodes.begin() + key)
			  8. Implement logic to search for and return a bid
			    a. Search (string bid Id)
			      Calculate the key for this bid
			    b. if (node == null pointer || node->key == UINT_MAX)
			      end if
			      return bid
			      Find that node matches key
			    c. if (node not equal null pointer and node member access key                               not equal UINT_MAX and node member access bid Id == 0)
			      end if
			      return node->bid;
			      find the match
			    d. while (node! = null pointer)
			    e. if (node->key! = UINT_MAX and node->bid Id == 0)
			      end if
			      return node->bid;
			      end while
			      vnode  node->next
			      return bid
